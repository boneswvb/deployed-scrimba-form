{"version":3,"sources":["FormsComponent.js","FormInfo.js","App.js","serviceWorker.js","index.js"],"names":["FormsComponent","props","type","name","value","data","firtsName","placeholder","onChange","handleChange","lastName","age","checked","gender","isVegan","isKosher","isLactoseFree","destination","FormInfo","state","bind","event","target","this","setState","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAgHeA,EA9GQ,SAACC,GACvB,OACC,8BACE,8BACC,yCACA,2BACAC,KAAK,OACLC,KAAK,YACLC,MAAQH,EAAMI,KAAKC,UACnBC,YAAY,aACZC,SAAWP,EAAMQ,eAEjB,6BACA,wCACA,2BACCP,KAAK,OACLC,KAAK,WACLC,MAAQH,EAAMI,KAAKK,SACnBH,YAAY,YACZC,SAAWP,EAAMQ,eAElB,6BACA,uCACA,2BACCP,KAAK,OACLC,KAAK,MACLC,MAAQH,EAAMI,KAAKM,IACnBJ,YAAY,MACZC,SAAWP,EAAMQ,eAElB,6BACG,+BACE,2BACIP,KAAK,QACLC,KAAK,SACLC,MAAM,OACNQ,QAAgC,SAAtBX,EAAMI,KAAKQ,OACrBL,SAAWP,EAAMQ,eANvB,SASA,6BACA,+BACE,2BACIP,KAAK,QACLC,KAAK,SACLC,MAAM,SACNQ,QAAgC,WAAtBX,EAAMI,KAAKQ,OACrBL,SAAWP,EAAMQ,eANvB,WASD,6BACA,+BACK,2BACIP,KAAK,WACLC,KAAK,UACLS,QAASX,EAAMI,KAAKS,QACpBN,SAAUP,EAAMQ,eALzB,mBAQG,6BACH,+BACK,2BACIP,KAAK,WACLC,KAAK,WACLS,QAAUX,EAAMI,KAAKU,SACrBP,SAAUP,EAAMQ,eALzB,eAQG,6BACH,+BACK,2BACIP,KAAK,WACLC,KAAK,gBACLS,QAAUX,EAAMI,KAAKW,cACrBR,SAAUP,EAAMQ,eALzB,qBASC,6BACA,+CACE,4BACIL,MAAQH,EAAMI,KAAKY,YACnBT,SAAWP,EAAMQ,aACjBN,KAAK,eAER,4DACE,4BAAQC,MAAM,WAAd,WACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,yBAAd,yBAEJ,6BACD,2CAED,6BACA,oDACA,yCAAgBH,EAAMI,KAAKC,UAA3B,IAAyCL,EAAMI,KAAKK,UACpD,wCAAeT,EAAMI,KAAKM,KAC1B,2CAAkBV,EAAMI,KAAKQ,QAC7B,gDAAuBZ,EAAMI,KAAKY,aAClC,wDAEI,qCAAYhB,EAAMI,KAAKS,QAAU,MAAQ,MACxC,sCAAYb,EAAMI,KAAKU,SAAW,MAAQ,MAC1C,4CAAmBd,EAAMI,KAAKW,cAAgB,MAAQ,SCjDnDE,E,YA5Bd,aAAe,IAAD,8BACb,+CACKC,MAAQ,CACZb,UAAW,GACXI,SAAU,GACVC,IAAK,GACLE,OAAQ,GACRC,SAAS,EACTC,UAAU,EACVC,eAAe,EACfC,YAAa,IAEd,EAAKR,aAAe,EAAKA,aAAaW,KAAlB,gBAZP,E,0EAeAC,GAAQ,IAAD,EACmBA,EAAMC,OAApCnB,EADW,EACXA,KAAMC,EADK,EACLA,MAAOF,EADF,EACEA,KAAMU,EADR,EACQA,QACjB,aAATV,EAAsBqB,KAAKC,SAAL,eAAiBrB,EAAOS,IAAaW,KAAKC,SAAL,eAAiBrB,EAAOC,M,+BAIrF,OACC,kBAAC,EAAD,CACAC,KAAOkB,KAAKJ,MACZV,aAAec,KAAKd,mB,GAzBAgB,a,MCdRC,MAVf,WACE,OACE,yBAAKC,UAAU,MACb,6BACE,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4cb6f575.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FormsComponent = (props) => {\r\n\treturn(\r\n\t\t<main>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<p>First Name</p>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tname=\"firtsName\" \r\n\t\t\t\t\tvalue={ props.data.firtsName } \r\n\t\t\t\t\tplaceholder=\"Firts Name\" \r\n\t\t\t\t\tonChange={ props.handleChange } \t\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<p>Last Name</p>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tname=\"lastName\" \r\n\t\t\t\t\t\tvalue={ props.data.lastName } \r\n\t\t\t\t\t\tplaceholder=\"Last Name\" \r\n\t\t\t\t\t\tonChange={ props.handleChange } \t\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<p>Your Age</p>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tname=\"age\" \r\n\t\t\t\t\t\tvalue={ props.data.age } \r\n\t\t\t\t\t\tplaceholder=\"Age\" \r\n\t\t\t\t\t\tonChange={ props.handleChange } \t\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<br />\r\n\t\t      <label>\r\n\t\t        <input \r\n\t\t            type=\"radio\" \r\n\t\t            name=\"gender\"\r\n\t\t            value=\"male\"\r\n\t\t            checked={ props.data.gender === \"male\" }\r\n\t\t            onChange={ props.handleChange }\r\n\t\t        /> Male\r\n\t\t      </label>\r\n\t\t      <br />\r\n\t\t      <label>\r\n\t\t        <input \r\n\t\t            type=\"radio\" \r\n\t\t            name=\"gender\"\r\n\t\t            value=\"female\"\r\n\t\t            checked={ props.data.gender === \"female\" }\r\n\t\t            onChange={ props.handleChange }\r\n\t\t        /> Female\r\n\t\t \t\t  </label>\t\r\n\t\t   \t\t<br />\r\n\t\t   \t\t<label>\r\n            <input \r\n                type=\"checkbox\" \r\n                name=\"isVegan\"\r\n                checked={props.data.isVegan}\r\n                onChange={props.handleChange}\r\n            /> Is vegetarian?\r\n          </label>\r\n          <br />\r\n\t\t   \t\t<label>\r\n            <input \r\n                type=\"checkbox\" \r\n                name=\"isKosher\"\r\n                checked={ props.data.isKosher }\r\n                onChange={props.handleChange}\r\n            /> Is kosher?\r\n          </label>\r\n          <br />\r\n\t\t   \t\t<label>\r\n            <input \r\n                type=\"checkbox\" \r\n                name=\"isLactoseFree\"\r\n                checked={ props.data.isLactoseFree }\r\n                onChange={props.handleChange}\r\n            /> Is Lactose Free?\r\n          </label>\r\n\t\t        \r\n\t\t      <br />\r\n\t\t      <label>Destination:</label>\r\n\t\t        <select \r\n\t\t            value={ props.data.destination }\r\n\t\t            onChange={ props.handleChange }\r\n\t\t            name=\"destination\"\r\n\t\t        >\r\n\t\t        \t<option>--Select A Destination--</option>\r\n\t            <option value=\"America\">America</option>\r\n\t            <option value=\"Some Island\">Some Island</option>\r\n\t            <option value=\"Moon\">Moon</option>\r\n\t            <option value=\">The Sun (Death Wish)\">The Sun (Death Wish)</option>\r\n\t\t        </select>\r\n\t        <br/>\r\n\t\t      <button>Submit</button>\r\n\t\t\t\t</form>\r\n\t      <hr />\r\n\t      <h2>Entered information:</h2>\r\n\t      <p>Your name: { props.data.firtsName } { props.data.lastName }</p>\r\n\t      <p>Your age: { props.data.age }</p>\r\n\t      <p>Your gender: { props.data.gender }</p>\r\n\t      <p>Your destination: { props.data.destination }</p>\r\n\t      <p>\r\n\t          Your dietary restrictions: \r\n\t          <p>Vegan: { props.data.isVegan ? \"Yes\" : \"No\" }</p>\r\n            <p>Kosher: {props.data.isKosher ? \"Yes\" : \"No\" }</p>\r\n            <p>Lactose Free: { props.data.isLactoseFree ? \"Yes\" : \"No\" }</p>\r\n\t      </p>\r\n    </main>\r\n\t)\r\n}\r\n\r\nexport default FormsComponent;","/*Travel form\r\n22 APRIL 2016 on Static Websites, Level 3, Exercise\r\nYou just started your own airline, and you need to create a form to collect data about your passengers' upcoming travel plans so they can book their flight.\r\n\r\nYou should collect the following information from the user:\r\n\r\nFirst name (text input)\r\nLast name (text input)\r\nAge (number input)\r\nGender (radio buttons with 2 or more options)\r\nLocation they're traveling to (select box with at least 3 options. \r\nYou're an airline that doesn't fly to many places...)\r\nWhether they have any dietary restrictions \r\n(check boxes for vegetarian, kosher, lactose free, etc. Include at least 3 options)\r\nEach element of the form should be given a name attribute so you can access the data \r\nin JavaScript and do stuff with it.\r\nThere should also be a button at the end of the form to submit it. \r\nUpon pressing the button, an alert should pop with the following info:\r\nFirst Name: ***\r\nLast Name: ***\r\nAge: ***\r\nLocation: ***\r\nDietry restrictions:***\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport FormsComponent from './FormsComponent';\r\n\r\nclass FormInfo extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tfirtsName: \"\",\r\n\t\t\tlastName: \"\",\r\n\t\t\tage: \"\",\r\n\t\t\tgender: \"\",\r\n\t\t\tisVegan: false,\r\n\t\t\tisKosher: false,\r\n\t\t\tisLactoseFree: false,\r\n\t\t\tdestination: \"\"\r\n\t\t}\r\n\t\tthis.handleChange = this.handleChange.bind(this)\r\n\t}\r\n\r\n  handleChange(event) {\r\n    const {name, value, type, checked} = event.target\r\n    type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\r\n  }\r\n  \t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<FormsComponent \r\n\t\t\tdata={ this.state }\r\n\t\t\thandleChange={ this.handleChange} />\r\n\t\t)}\r\n\t}\r\n\r\nexport default FormInfo;","import React from 'react';\nimport FormInfo from './FormInfo';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"tc\">\n      <div>\n        <FormInfo />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}